package prova2tri;

import java.util.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

public class Menu {
    private Scanner scanner = new Scanner(System.in);
    private List<Serie> favoritas = PersistenciaSeries.carregar("favoritas.json");
    private List<Serie> assistidas = PersistenciaSeries.carregar("assistidas.json");
    private List<Serie> paraVerDepois = PersistenciaSeries.carregar("verDepois.json");

    public void executar() {
        System.out.print("Digite seu nome: ");
        String nome = scanner.nextLine();
        System.out.println("Bem-vindo(a), " + nome + "!");

        while (true) {
            System.out.println("\n--- MENU ---");
            System.out.println("1. Buscar série por nome");
            System.out.println("2. Ver listas");
            System.out.println("3. Ordenar listas");
            System.out.println("4. Sair");
            System.out.print("Escolha: ");
            String opcao = scanner.nextLine();

            switch (opcao) {
                case "1": buscarSerie(); break;
                case "2": mostrarListas(); break;
                case "3": ordenarListas(); break;
                case "4": salvarTudo(); return;
                default: System.out.println("Opção inválida!");
            }
        }
    }

    private void buscarSerie() {
        System.out.print("Digite o nome da série: ");
        String termo = scanner.nextLine();
        List<Serie> resultados = ConsultaAPITVMaze.buscarSeriePorNome(termo);

        if (resultados.isEmpty()) {
            System.out.println("Nenhuma série encontrada.");
            return;
        }

        for (int i = 0; i < resultados.size(); i++) {
            System.out.println("[" + i + "] " + resultados.get(i).getNome());
        }
        System.out.print("Escolha uma série pelo número: ");
        int escolha = Integer.parseInt(scanner.nextLine());
        Serie serie = resultados.get(escolha);
        System.out.println(serie);

        System.out.println("Deseja adicionar em:");
        System.out.println("1. Favoritas");
        System.out.println("2. Assistidas");
        System.out.println("3. Para ver depois");
        System.out.print("Escolha: ");
        String lista = scanner.nextLine();

        switch (lista) {
            case "1": favoritas.add(serie); break;
            case "2": assistidas.add(serie); break;
            case "3": paraVerDepois.add(serie); break;
            default: System.out.println("Opção inválida!");
        }
    }

    private void mostrarListas() {
        System.out.println("\n--- FAVORITAS ---");
        favoritas.forEach(System.out::println);

        System.out.println("\n--- ASSISTIDAS ---");
        assistidas.forEach(System.out::println);

        System.out.println("\n--- PARA VER DEPOIS ---");
        paraVerDepois.forEach(System.out::println);
    }

    private void ordenarListas() {
        System.out.println("\nQual lista deseja ordenar?");
        System.out.println("1. Favoritas");
        System.out.println("2. Assistidas");
        System.out.println("3. Para ver depois");
        System.out.print("Escolha: ");
        String tipo = scanner.nextLine();

        List<Serie> lista = switch (tipo) {
            case "1" -> favoritas;
            case "2" -> assistidas;
            case "3" -> paraVerDepois;
            default -> null;
        };

        if (lista == null) {
            System.out.println("Opção inválida!");
            return;
        }

        System.out.println("\nOrdenar por:");
        System.out.println("1. Nome");
        System.out.println("2. Nota geral");
        System.out.println("3. Status");
        System.out.println("4. Data de estreia");
        System.out.print("Escolha: ");
        String criterio = scanner.nextLine();

        switch (criterio) {
            case "1": lista.sort(Comparator.comparing(Serie::getNome)); break;
            case "2": lista.sort(Comparator.comparing(Serie::getNota).reversed()); break;
            case "3": lista.sort(Comparator.comparing(Serie::getStatus)); break;
            case "4": lista.sort(Comparator.comparing(Serie::getDataEstreia)); break;
            default: System.out.println("Critério inválido!"); return;
        }
        System.out.println("Lista ordenada:");
        lista.forEach(System.out::println);
    }

    private void salvarTudo() {
        PersistenciaSeries.salvar(favoritas, "favoritas.json");
        PersistenciaSeries.salvar(assistidas, "assistidas.json");
        PersistenciaSeries.salvar(paraVerDepois, "verDepois.json");
        System.out.println("Dados salvos. Até logo!");
    }
}